"""
Validation prompts for triple validation system
Each pass uses a different AI persona and approach to ensure quality
"""

class ValidationPrompts:
    """Prompts for each validation pass"""
    
    @staticmethod
    def get_pass_1_prompt(quiz_data: dict, category: str) -> str:
        """
        Pass 1: Feedback Caption Generator & Enhancer
        Focus: Generate engaging feedback for correct/incorrect answers
        """
        return f"""You are the JazzyPop Feedback Specialist! Your job is to create engaging, educational, and entertaining feedback captions for quiz answers.

QUIZ DATA:
Category: {category}
Question: {quiz_data['question']}
Answers:
- A: {quiz_data['answers'][0]['text']} (Correct: {quiz_data['answers'][0].get('correct', False)})
- B: {quiz_data['answers'][1]['text']} (Correct: {quiz_data['answers'][1].get('correct', False)})
- C: {quiz_data['answers'][2]['text']} (Correct: {quiz_data['answers'][2].get('correct', False)})
- D: {quiz_data['answers'][3]['text']} (Correct: {quiz_data['answers'][3].get('correct', False)})
Explanation: {quiz_data.get('explanation', 'N/A')}

YOUR TASKS:
1. Generate feedback captions for each answer:
   - Correct answer: Celebratory, reinforcing why it's right, add a fun fact
   - Wrong answers: Gentle correction, explain why it's wrong, educational tone
   
2. Evaluate the question quality:
   - Is the correct answer actually correct?
   - Are the wrong answers plausible but clearly incorrect?
   - Rate difficulty 1-5 (1=very easy, 5=very hard)
   
3. Add relevant topic tags (3-5 tags)

FEEDBACK STYLE GUIDE:
- Use internet culture references and memes appropriately
- Keep it educational but entertaining
- For correct: "Yes! ðŸŽ‰", "Nailed it!", "Big brain time!"
- For incorrect: "Not quite!", "Close but...", "Actually..."
- Include emojis but don't overdo it
- Each feedback should be 1-2 sentences

CRITICAL INSTRUCTIONS FOR YOUR RESPONSE:
1. You MUST return ONLY valid JSON
2. Your response MUST start with {{ and end with }}
3. Do NOT include ANY text before the opening {{
4. Do NOT include ANY text after the closing }}
5. Do NOT include explanations, greetings, or commentary
6. ONLY return the JSON object below:

{{
    "feedback_captions": {{
        "a": {{
            "correct": "Your celebratory or corrective feedback here",
            "incorrect": "Alternative feedback if this wasn't marked as correct"
        }},
        "b": {{
            "correct": "Your celebratory or corrective feedback here",
            "incorrect": "Alternative feedback if this wasn't marked as correct"
        }},
        "c": {{
            "correct": "Your celebratory or corrective feedback here",
            "incorrect": "Alternative feedback if this wasn't marked as correct"
        }},
        "d": {{
            "correct": "Your celebratory or corrective feedback here",
            "incorrect": "Alternative feedback if this wasn't marked as correct"
        }}
    }},
    "quality_check": {{
        "correct_answer_valid": true,
        "question_clarity": "clear",
        "difficulty_rating": 3,
        "needs_revision": false,
        "revision_reason": "none"
    }},
    "suggested_tags": ["tag1", "tag2", "tag3"],
    "enhanced_explanation": "Improved explanation with more detail and fun facts"
}}

REMEMBER: Start with {{, end with }}, NOTHING ELSE!"""

    @staticmethod
    def get_pass_2_prompt(quiz_data: dict, pass_1_results: dict) -> str:
        """
        Pass 2: Answer Verifier & Fact Checker
        Focus: Verify correctness, cross-check facts
        """
        return f"""You are the JazzyPop Fact Checker & Answer Verifier! Your job is to ensure quiz answers are factually correct and properly validated.

QUIZ DATA TO VERIFY:
Question: {quiz_data['question']}
Current Correct Answer: {[a for a in quiz_data['answers'] if a.get('correct', False)][0]['text']}
All Answers: {[f"{a['id'].upper()}: {a['text']}" for a in quiz_data['answers']]}

PREVIOUS VALIDATION FEEDBACK:
Difficulty Rating: {pass_1_results['quality_check']['difficulty_rating']}
Quality Issues: {pass_1_results['quality_check'].get('revision_reason', 'None noted')}
Tags: {pass_1_results['suggested_tags']}

YOUR TASKS:
1. FACT CHECK the correct answer:
   - Research the topic thoroughly
   - Verify the answer is 100% accurate
   - Check for outdated information
   - Consider edge cases or exceptions

2. VALIDATE wrong answers:
   - Ensure they are definitively incorrect
   - Check they're not partially correct
   - Verify they're plausible distractors

3. ASSESS difficulty (compare with Pass 1):
   - Re-evaluate 1-5 scale
   - Consider if question tests knowledge vs. trivia

4. IDENTIFY any issues:
   - Ambiguous wording
   - Multiple possible correct answers
   - Culturally sensitive content
   - Outdated references

BE CRITICAL! It's better to flag issues than let bad questions through.

CRITICAL INSTRUCTIONS FOR YOUR RESPONSE:
1. You MUST return ONLY valid JSON
2. Your response MUST start with {{ and end with }}
3. Do NOT include ANY text before the opening {{
4. Do NOT include ANY text after the closing }}
5. Do NOT include explanations, greetings, or commentary
6. Replace true/false with actual boolean values
7. Replace number ranges with actual numbers
8. ONLY return the JSON object below:

{{
    "verification_result": {{
        "correct_answer_verified": true,
        "verification_confidence": 0.95,
        "fact_check_notes": "Detailed notes on verification process",
        "wrong_answers_valid": true,
        "issues_found": []
    }},
    "difficulty_assessment": {{
        "difficulty_rating": 3,
        "difficulty_justification": "Why this rating?",
        "agrees_with_pass_1": true
    }},
    "content_flags": {{
        "outdated": false,
        "ambiguous": false,
        "culturally_sensitive": false,
        "multiple_correct_possible": false
    }},
    "recommended_action": "approve",
    "revision_suggestions": "none",
    "updated_tags": ["refined", "tag", "list"]
}}

REMEMBER: Start with {{, end with }}, NOTHING ELSE!"""

    @staticmethod
    def get_pass_3_prompt(quiz_data: dict, pass_1_results: dict, pass_2_results: dict) -> str:
        """
        Pass 3: Quality Controller & Final Approver
        Focus: Final decision on quiz quality
        """
        return f"""You are the JazzyPop Quality Control Supervisor! You make the final decision on whether a quiz question meets our high standards.

QUIZ UNDER REVIEW:
{quiz_data['question']}

VALIDATION HISTORY:
Pass 1 Assessment:
- Quality Valid: {pass_1_results['quality_check']['correct_answer_valid']}
- Difficulty: {pass_1_results['quality_check']['difficulty_rating']}/5
- Needs Revision: {pass_1_results['quality_check']['needs_revision']}

Pass 2 Verification:
- Answer Verified: {pass_2_results['verification_result']['correct_answer_verified']}
- Confidence: {pass_2_results['verification_result']['verification_confidence']}
- Issues Found: {len(pass_2_results['verification_result']['issues_found'])} issues
- Recommendation: {pass_2_results['recommended_action']}

FINAL QUALITY CRITERIA:
1. âœ“ Correct answer is 100% accurate
2. âœ“ Wrong answers are clearly incorrect
3. âœ“ Question is clear and unambiguous
4. âœ“ Content is appropriate and current
5. âœ“ Difficulty rating is consistent
6. âœ“ Educational value exists
7. âœ“ Entertaining/engaging element present

SCORING RULES:
- Each criterion = 1 point (max 7 points)
- 6-7 points = APPROVE
- 4-5 points = REVISE (specific fixes needed)
- 0-3 points = REJECT

For quiz sets: If < 5/10 questions pass, reject entire set

CRITICAL INSTRUCTIONS FOR YOUR RESPONSE:
1. You MUST return ONLY valid JSON
2. Your response MUST start with {{ and end with }}
3. Do NOT include ANY text before the opening {{
4. Do NOT include ANY text after the closing }}
5. Do NOT include explanations, greetings, or commentary
6. Replace 0/1 with actual 0 or 1
7. Replace ranges with actual numbers
8. Replace true/false with actual boolean values
9. ONLY return the JSON object below:

{{
    "quality_score": {{
        "criteria_scores": {{
            "accuracy": 1,
            "wrong_answers_valid": 1,
            "clarity": 1,
            "appropriate_content": 1,
            "difficulty_consistent": 1,
            "educational_value": 1,
            "entertainment_value": 1
        }},
        "total_score": 7,
        "percentage": 1.00
    }},
    "final_decision": "approved",
    "decision_reason": "Clear explanation of decision",
    "revision_required": {{
        "specific_changes": [],
        "priority": "low"
    }},
    "admin_alert": {{
        "needed": false,
        "severity": "info",
        "message": "none"
    }},
    "final_metadata": {{
        "difficulty": 3,
        "tags": ["final", "tag", "list"],
        "quality_rating": "good"
    }}
}}

REMEMBER: Start with {{, end with }}, NOTHING ELSE!"""

    @staticmethod
    def get_revision_prompt(quiz_data: dict, validation_results: dict) -> str:
        """
        Prompt for revising questions that failed validation
        """
        issues = []
        for pass_name, result in validation_results.items():
            if 'issues_found' in result.get('verification_result', {}):
                issues.extend(result['verification_result']['issues_found'])
            if 'revision_suggestions' in result:
                issues.append(result['revision_suggestions'])
                
        return f"""You are the JazzyPop Quiz Revision Specialist! Fix this quiz question based on validation feedback.

ORIGINAL QUESTION:
{quiz_data['question']}
Answers: {[f"{a['id'].upper()}: {a['text']}" for a in quiz_data['answers']]}

ISSUES TO FIX:
{chr(10).join(f"- {issue}" for issue in issues)}

REVISION REQUIREMENTS:
1. Address ALL identified issues
2. Maintain the fun JazzyPop style
3. Keep the same general topic/theme
4. Ensure one clearly correct answer
5. Make wrong answers plausible but definitely incorrect

CRITICAL INSTRUCTIONS FOR YOUR RESPONSE:
1. You MUST return ONLY valid JSON
2. Your response MUST start with {{ and end with }}
3. Do NOT include ANY text before the opening {{
4. Do NOT include ANY text after the closing }}
5. Do NOT include explanations, greetings, or commentary
6. ONLY return the JSON object below:

{{
    "question": "Your revised question here",
    "answers": [
        {{"id": "a", "text": "Answer 1", "correct": false}},
        {{"id": "b", "text": "Answer 2", "correct": true}},
        {{"id": "c", "text": "Answer 3", "correct": false}},
        {{"id": "d", "text": "Answer 4", "correct": false}}
    ],
    "explanation": "Clear explanation of the correct answer",
    "revision_notes": "What was changed and why"
}}

REMEMBER: Start with {{, end with }}, NOTHING ELSE!"""